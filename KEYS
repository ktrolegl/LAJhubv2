--[[
    LAJ HUB Key System - Secure Edition
    Custom UI key verification with advanced webhook protection
    Multi-layer security and executor compatibility
]]

-- ==================== SERVICES ==================== --
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

-- ==================== VARIABLES ==================== --
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- ==================== CONFIGURATION ==================== --
-- Valid key list (edit these)
local VALID_KEYS = {
    "LAJPRO",
    "LAJVIP456",
    "LAJHUB789"
}

-- Discord server link
local DISCORD_LINK = "https://discord.gg/4mgdcfvAJU"

-- Script URL (where your main script is hosted)
local SCRIPT_URL = "https://raw.githubusercontent.com/ktrolegl/LAJhubv2/refs/heads/main/testingv2"

-- ==================== WEBHOOK SECURITY ==================== --
-- Primary webhook security system (advanced multi-layer obfuscation)
local function get_primary_webhook()
    -- Split webhook into segments for security
    local segments = {
        [11] = "sptth",
        [5] = "://",
        [7] = "discor",
        [3] = "d.com/",
        [9] = "api/",
        [1] = "webhooks",
        [10] = "/",
        [12] = "1535739",
        [6] = "58902",
        [2] = "9011",
        [15] = "4224",
        [4] = "/",
        [13] = "VHqKfAs",
        [8] = "LDqGIUQ5",
        [14] = "icewgv",
        [16] = "8YX-",
        [17] = "SblIBEsm",
        [18] = "G3NmamG",
        [19] = "83y68hQc",
        [20] = "GrfTEXmd",
        [21] = "W0rCy0P",
        [22] = "98zuz"
    }
    
    -- Assemble webhook from segments in the correct order
    local assembled = ""
    for i = 22, 1, -1 do
        if segments[i] then
            assembled = assembled .. segments[i]
        end
    end
    
    return assembled
end

-- Secondary backup webhook with different security method
local function get_backup_webhook()
    -- Use string reversal obfuscation for backup webhook
    local reversed = "zuz89P0yCr0WdmXETfrGcQh86y38GMamN3GmsEBIlbS-XY8vgweci5QUIGqDLsAfKqHV/4224109920895937531/skoohbew/ipa/moc.drocsid//:sptth"
    
    -- Additional encryption layer
    local encrypted = string.reverse(reversed)
    
    -- Validation check (can add more security here)
    if #encrypted > 0 then
        return encrypted
    end
    
    return nil
end

-- Webhook retrieval system with security checks
local function get_secure_webhook()
    -- Security check logic
    local secure_check_passed = true
    
    -- Try to get primary webhook
    local primary_webhook = nil
    if secure_check_passed then
        primary_webhook = get_primary_webhook()
    end
    
    -- Fallback to backup webhook if needed
    if not primary_webhook or #primary_webhook < 10 then
        return get_backup_webhook()
    end
    
    return primary_webhook
end

-- ==================== HTTP REQUEST HANDLING ==================== --
-- Request function for different executors
local request = syn and syn.request or 
                http and http.request or 
                http_request or 
                request or 
                httprequest or
                fluxus and fluxus.request

-- ==================== UI THEME ==================== --
local Theme = {
    Background = Color3.fromRGB(35, 35, 35),
    DarkBackground = Color3.fromRGB(25, 25, 25),
    TextColor = Color3.fromRGB(255, 255, 255),
    AccentColor = Color3.fromRGB(65, 105, 225),
    ErrorColor = Color3.fromRGB(220, 60, 60),
    SuccessColor = Color3.fromRGB(60, 220, 60)
}

-- ==================== KEY VERIFICATION FUNCTIONS ==================== --
-- Function to log key usage via webhook
local function logKeyUsage(key, success)
    local success, error_message = pcall(function()
        request({
            Url = get_secure_webhook(),
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({
                ["content"] = "",
                ["embeds"] = {{
                    ["title"] = success and "LAJ HUB Key Used Successfully" or "Failed Key Attempt",
                    ["color"] = success and 65280 or 16711680,
                    ["fields"] = {
                        {
                            ["name"] = "User",
                            ["value"] = "```" .. Player.Name .. "```",
                            ["inline"] = true
                        },
                        {
                            ["name"] = "User ID",
                            ["value"] = "```" .. tostring(Player.UserId) .. "```",
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Key Used",
                            ["value"] = "```" .. key .. "```",
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Game",
                            ["value"] = "```" .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name .. "```",
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Game ID",
                            ["value"] = "```" .. tostring(game.PlaceId) .. "```",
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Executor",
                            ["value"] = "```" .. (identifyexecutor and identifyexecutor() or "Unknown") .. "```",
                            ["inline"] = true
                        }
                    },
                    ["footer"] = {
                        ["text"] = "Key Usage Timestamp: " .. os.date("%Y-%m-%d %H:%M:%S")
                    }
                }}
            })
        })
    end)
    
    if not success then
        warn("Failed to send webhook: " .. tostring(error_message))
    end
end

-- Function to verify a key
local function verifyKey(key)
    for _, validKey in ipairs(VALID_KEYS) do
        if key == validKey then
            return true
        end
    end
    return false
end

-- Function to load the main script
local function loadMainScript()
    local success, error_message = pcall(function()
        loadstring(game:HttpGet(SCRIPT_URL))()
    end)
    
    if not success then
        warn("Failed to load main script: " .. tostring(error_message))
    end
end

-- ==================== UI CREATION ==================== --
-- Create the key system UI
local function createKeySystemUI()
    -- Check if UI already exists and remove it
    if CoreGui:FindFirstChild("LAJHubKeySystem") then
        CoreGui:FindFirstChild("LAJHubKeySystem"):Destroy()
    end
    
    -- Main ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "LAJHubKeySystem"
    ScreenGui.Parent = CoreGui
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main Frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 400, 0, 300) -- Slightly increased height for Discord button
    MainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
    MainFrame.BackgroundColor3 = Theme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    -- Apply corner radius
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 6)
    MainCorner.Parent = MainFrame
    
    -- Title Bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.Position = UDim2.new(0, 0, 0, 0)
    TitleBar.BackgroundColor3 = Theme.DarkBackground
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 6)
    TitleCorner.Parent = TitleBar
    
    -- Fix corners
    local TitleCornerFix = Instance.new("Frame")
    TitleCornerFix.Name = "TitleCornerFix"
    TitleCornerFix.Size = UDim2.new(1, 0, 0.5, 0)
    TitleCornerFix.Position = UDim2.new(0, 0, 0.5, 0)
    TitleCornerFix.BackgroundColor3 = Theme.DarkBackground
    TitleCornerFix.BorderSizePixel = 0
    TitleCornerFix.Parent = TitleBar
    
    -- Make the title bar draggable
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateInput(input)
        end
    end)
    
    -- Title
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Size = UDim2.new(1, -60, 1, 0)
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = "LAJ HUB - Key System"
    TitleLabel.TextColor3 = Theme.TextColor
    TitleLabel.TextSize = 16
    TitleLabel.Font = Enum.Font.SourceSansBold
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = TitleBar
    
    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 24, 0, 24)
    CloseButton.Position = UDim2.new(1, -28, 0, 3)
    CloseButton.BackgroundColor3 = Theme.ErrorColor
    CloseButton.Text = "×"
    CloseButton.TextColor3 = Theme.TextColor
    CloseButton.TextSize = 18
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Parent = TitleBar
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 4)
    CloseCorner.Parent = CloseButton
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    -- Minimize Button
    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.Size = UDim2.new(0, 24, 0, 24)
    MinimizeButton.Position = UDim2.new(1, -56, 0, 3)
    MinimizeButton.BackgroundColor3 = Theme.Background
    MinimizeButton.Text = "-"
    MinimizeButton.TextColor3 = Theme.TextColor
    MinimizeButton.TextSize = 18
    MinimizeButton.Font = Enum.Font.SourceSansBold
    MinimizeButton.Parent = TitleBar
    
    local MinimizeCorner = Instance.new("UICorner")
    MinimizeCorner.CornerRadius = UDim.new(0, 4)
    MinimizeCorner.Parent = MinimizeButton
    
    -- Tab system
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(0, 80, 1, -30)
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.BackgroundColor3 = Theme.DarkBackground
    TabContainer.BorderSizePixel = 0
    TabContainer.Parent = MainFrame
    
    local TabContainerCorner = Instance.new("UICorner")
    TabContainerCorner.CornerRadius = UDim.new(0, 6)
    TabContainerCorner.Parent = TabContainer
    
    -- Fix tab container corners
    local TabCornerFix = Instance.new("Frame")
    TabCornerFix.Name = "TabCornerFix"
    TabCornerFix.Size = UDim2.new(0.5, 0, 1, 0)
    TabCornerFix.Position = UDim2.new(0.5, 0, 0, 0)
    TabCornerFix.BackgroundColor3 = Theme.DarkBackground
    TabCornerFix.BorderSizePixel = 0
    TabCornerFix.Parent = TabContainer
    
    -- Main Tab
    local MainTab = Instance.new("TextButton")
    MainTab.Name = "MainTab"
    MainTab.Size = UDim2.new(1, 0, 0, 30)
    MainTab.Position = UDim2.new(0, 0, 0, 10)
    MainTab.BackgroundColor3 = Theme.AccentColor
    MainTab.Text = "Tab 1"
    MainTab.TextColor3 = Theme.TextColor
    MainTab.TextSize = 14
    MainTab.Font = Enum.Font.SourceSansBold
    MainTab.BorderSizePixel = 0
    MainTab.Parent = TabContainer
    
    local MainTabCorner = Instance.new("UICorner")
    MainTabCorner.CornerRadius = UDim.new(0, 4)
    MainTabCorner.Parent = MainTab
    
    -- Content Area
    local ContentArea = Instance.new("Frame")
    ContentArea.Name = "ContentArea"
    ContentArea.Size = UDim2.new(1, -90, 1, -40)
    ContentArea.Position = UDim2.new(0, 85, 0, 35)
    ContentArea.BackgroundTransparency = 1
    ContentArea.BorderSizePixel = 0
    ContentArea.Parent = MainFrame
    
    -- Key input elements
    local KeyLabel = Instance.new("TextLabel")
    KeyLabel.Name = "KeyLabel"
    KeyLabel.Size = UDim2.new(1, 0, 0, 20)
    KeyLabel.Position = UDim2.new(0, 0, 0, 10)
    KeyLabel.BackgroundTransparency = 1
    KeyLabel.Text = "Enter your key:"
    KeyLabel.TextColor3 = Theme.TextColor
    KeyLabel.TextSize = 14
    KeyLabel.Font = Enum.Font.SourceSans
    KeyLabel.TextXAlignment = Enum.TextXAlignment.Left
    KeyLabel.Parent = ContentArea
    
    local KeyInput = Instance.new("TextBox")
    KeyInput.Name = "KeyInput"
    KeyInput.Size = UDim2.new(1, 0, 0, 35)
    KeyInput.Position = UDim2.new(0, 0, 0, 35)
    KeyInput.BackgroundColor3 = Theme.DarkBackground
    KeyInput.PlaceholderText = "Enter your LAJ HUB key here..."
    KeyInput.PlaceholderColor3 = Color3.fromRGB(120, 120, 120)
    KeyInput.Text = ""
    KeyInput.TextColor3 = Theme.TextColor
    KeyInput.TextSize = 14
    KeyInput.Font = Enum.Font.SourceSans
    KeyInput.BorderSizePixel = 0
    KeyInput.ClearTextOnFocus = false
    KeyInput.Parent = ContentArea
    
    local KeyInputCorner = Instance.new("UICorner")
    KeyInputCorner.CornerRadius = UDim.new(0, 4)
    KeyInputCorner.Parent = KeyInput
    
    -- Button for key verification
    local VerifyButton = Instance.new("TextButton")
    VerifyButton.Name = "VerifyButton"
    VerifyButton.Size = UDim2.new(1, 0, 0, 35)
    VerifyButton.Position = UDim2.new(0, 0, 0, 80)
    VerifyButton.BackgroundColor3 = Theme.AccentColor
    VerifyButton.Text = "Verify Key"
    VerifyButton.TextColor3 = Theme.TextColor
    VerifyButton.TextSize = 16
    VerifyButton.Font = Enum.Font.SourceSansBold
    VerifyButton.BorderSizePixel = 0
    VerifyButton.Parent = ContentArea
    
    local VerifyCorner = Instance.new("UICorner")
    VerifyCorner.CornerRadius = UDim.new(0, 4)
    VerifyCorner.Parent = VerifyButton
    
    -- Status label
    local StatusLabel = Instance.new("TextLabel")
    StatusLabel.Name = "StatusLabel"
    StatusLabel.Size = UDim2.new(1, 0, 0, 20)
    StatusLabel.Position = UDim2.new(0, 0, 0, 125)
    StatusLabel.BackgroundTransparency = 1
    StatusLabel.Text = "Status: Waiting for key..."
    StatusLabel.TextColor3 = Theme.TextColor
    StatusLabel.TextSize = 14
    StatusLabel.Font = Enum.Font.SourceSans
    StatusLabel.TextXAlignment = Enum.TextXAlignment.Left
    StatusLabel.Parent = ContentArea
    
    -- Discord button
    local DiscordButton = Instance.new("TextButton")
    DiscordButton.Name = "DiscordButton"
    DiscordButton.Size = UDim2.new(1, 0, 0, 35)
    DiscordButton.Position = UDim2.new(0, 0, 0, 155)
    DiscordButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242) -- Discord color
    DiscordButton.Text = "Join Discord for Key"
    DiscordButton.TextColor3 = Theme.TextColor
    DiscordButton.TextSize = 16
    DiscordButton.Font = Enum.Font.SourceSansBold
    DiscordButton.BorderSizePixel = 0
    DiscordButton.Parent = ContentArea
    
    local DiscordCorner = Instance.new("UICorner")
    DiscordCorner.CornerRadius = UDim.new(0, 4)
    DiscordCorner.Parent = DiscordButton
    
    -- Verify key function
    local function verifyKeyPressed()
        local inputKey = KeyInput.Text
        
        if inputKey == "" then
            StatusLabel.Text = "Status: Please enter a key!"
            StatusLabel.TextColor3 = Theme.ErrorColor
            return
        end
        
        StatusLabel.Text = "Status: Verifying key..."
        StatusLabel.TextColor3 = Theme.TextColor
        
        -- Simulate verification delay
        wait(1)
        
        local isValid = verifyKey(inputKey)
        
        if isValid then
            StatusLabel.Text = "Status: Key verified! Loading script..."
            StatusLabel.TextColor3 = Theme.SuccessColor
            
            -- Log successful key use
            logKeyUsage(inputKey, true)
            
            -- Tween animation for success
            local successTween = TweenService:Create(
                VerifyButton,
                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = Theme.SuccessColor}
            )
            successTween:Play()
            
            -- Load main script after a brief delay
            wait(1.5)
            ScreenGui:Destroy()
            loadMainScript()
        else
            StatusLabel.Text = "Status: Invalid key! Try again."
            StatusLabel.TextColor3 = Theme.ErrorColor
            
            -- Log failed key attempt
            logKeyUsage(inputKey, false)
            
            -- Tween animation for error
            local errorTween = TweenService:Create(
                VerifyButton,
                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = Theme.ErrorColor}
            )
            errorTween:Play()
            
            -- Reset button color after animation
            wait(0.5)
            local resetTween = TweenService:Create(
                VerifyButton,
                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = Theme.AccentColor}
            )
            resetTween:Play()
        end
    end
    
    -- Button events
    VerifyButton.MouseButton1Click:Connect(verifyKeyPressed)
    
    -- Discord button event
    DiscordButton.MouseButton1Click:Connect(function()
        StatusLabel.Text = "Status: Discord link copied to clipboard!"
        StatusLabel.TextColor3 = Color3.fromRGB(88, 101, 242)
        
        -- Copy Discord link to clipboard
        if setclipboard then
            setclipboard(DISCORD_LINK)
        end
    end)
    
    -- Enter key event
    KeyInput.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            verifyKeyPressed()
        end
    end)
    
    -- Apply some animations
    MainFrame.BackgroundTransparency = 1
    TitleBar.BackgroundTransparency = 1
    TabContainer.BackgroundTransparency = 1
    KeyInput.BackgroundTransparency = 1
    VerifyButton.BackgroundTransparency = 1
    DiscordButton.BackgroundTransparency = 1
    
    -- Animate UI appearance
    local fadeInTime = 0.5
    TweenService:Create(MainFrame, TweenInfo.new(fadeInTime), {BackgroundTransparency = 0}):Play()
    TweenService:Create(TitleBar, TweenInfo.new(fadeInTime), {BackgroundTransparency = 0}):Play()
    TweenService:Create(TabContainer, TweenInfo.new(fadeInTime), {BackgroundTransparency = 0}):Play()
    TweenService:Create(KeyInput, TweenInfo.new(fadeInTime), {BackgroundTransparency = 0}):Play()
    TweenService:Create(VerifyButton, TweenInfo.new(fadeInTime), {BackgroundTransparency = 0}):Play()
    TweenService:Create(DiscordButton, TweenInfo.new(fadeInTime), {BackgroundTransparency = 0}):Play()
    
    -- Return the UI
    return ScreenGui
end

-- ==================== API EXPORT ==================== --
-- Return the API
return {
    get_webhook = get_secure_webhook,
    create_key_system = createKeySystemUI,
    verify_key = verifyKey,
    load_script = loadMainScript
}
