---date
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
 
local Window = Rayfield:CreateWindow({
    Name = "LAJ HUBs | Dead Rails [BETA] ",
    LoadingTitle = "LAJ HUB | Loading...",
    LoadingSubtitle = "Please wait...",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "UnityNexus_Config"
    }
})
 
-- üõ°Ô∏è Advanced Anti-Ban & Anti-Detection System
local function AdvancedAntiBan()
    local success, err = pcall(function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local RunService = game:GetService("RunService")
        
        -- 1. Network Ownership Bypass - Use moderate values to avoid detection
        sethiddenproperty(LocalPlayer, "SimulationRadius", 50)
        sethiddenproperty(LocalPlayer, "MaximumSimulationRadius", 75)
        sethiddenproperty(LocalPlayer, "PreSimulationRadius", 65)
        
        -- 2. Anti-Cheat Detection Bypass
        -- Hook __namecall to prevent anti-cheat remote events from firing
        local oldNamecall = nil
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            local args = {...}
            local method = getnamecallmethod()
            
            -- Check if the remote function/event contains words related to anti-cheat
            if (method == "FireServer" or method == "InvokeServer") and typeof(self) == "Instance" then
                local name = self.Name:lower()
                if name:find("detect") or name:find("cheat") or name:find("ban") or 
                   name:find("kick") or name:find("report") or name:find("violation") then
                    -- Don't fire these remotes
                    return nil
                end
            end
            
            return oldNamecall(self, ...)
        end)
        
        -- 3. Humanoid Spoof 
        -- Make humanoid properties appear normal to the server
        local oldIndex = nil
        oldIndex = hookmetamethod(game, "__index", function(self, key)
            if not checkcaller() and self == LocalPlayer.Character and self:FindFirstChild("Humanoid") then
                if key == "WalkSpeed" then
                    return 16 -- Default walk speed
                elseif key == "JumpPower" then
                    return 50 -- Default jump power
                end
            end
            return oldIndex(self, key)
        end)
        
        -- 4. NewIndex Hook (Prevents anti-cheat from modifying your character)
        local oldNewIndex = nil
        oldNewIndex = hookmetamethod(game, "__newindex", function(self, key, value)
            if not checkcaller() and self == LocalPlayer.Character and self:FindFirstChild("Humanoid") then
                if key == "WalkSpeed" and value < self.Humanoid.WalkSpeed then
                    -- Anti-cheat is trying to reset our speed
                    return oldNewIndex(self, key, self.Humanoid.WalkSpeed)
                elseif key == "JumpPower" and value < self.Humanoid.JumpPower then
                    -- Anti-cheat is trying to reset our jump power
                    return oldNewIndex(self, key, self.Humanoid.JumpPower)
                end
            end
            return oldNewIndex(self, key, value)
        end)
        
        -- 5. Anti-Kick Protection
        local OldDisconnect
        OldDisconnect = hookfunction(LocalPlayer.Kick, function(...)
            wait(9e9) -- This effectively prevents kicking
            return OldDisconnect(...)
        end)
        
        -- 6. Sanitize Character on Respawn
        LocalPlayer.CharacterAdded:Connect(function(character)
            wait(0.5)
            -- Reapply all protections
            sethiddenproperty(LocalPlayer, "SimulationRadius", 50)
            sethiddenproperty(LocalPlayer, "MaximumSimulationRadius", 75)
            sethiddenproperty(LocalPlayer, "PreSimulationRadius", 65)
            
            -- Reset stats to avoid detection
            if character:FindFirstChild("Humanoid") then
                -- Temporarily set to normal
                local currentWS = character.Humanoid.WalkSpeed
                local currentJP = character.Humanoid.JumpPower
                character.Humanoid.WalkSpeed = 16
                character.Humanoid.JumpPower = 50
                
                -- Wait for anti-cheat check to likely pass
                wait(1)
                
                -- Restore values
                character.Humanoid.WalkSpeed = currentWS
                character.Humanoid.JumpPower = currentJP
            end
        end)
        
        -- 7. Periodic Cleanup (removes any anti-cheat modules)
        spawn(function()
            while wait(10) do
                for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("Script") and (v.Name:lower():find("anti") or v.Name:lower():find("detect")) then
                        v:Destroy()
                    end
                end
                
                -- Remove tracking child added/changed callbacks
                for _, connection in pairs(getconnections(LocalPlayer.Character.ChildAdded)) do
                    connection:Disable()
                end
                
                -- Clear memory of previous teleports 
                game:GetService("TeleportService"):SetTeleportGui(nil)
            end
        end)
    end)
    
    if not success then
        warn("Anti-Ban system encountered a minor issue: " .. tostring(err))
    else
        print("LAJ HUB Advanced Anti-Ban system activated successfully")
    end
end

AdvancedAntiBan()
 
-- üìå Player Tab
local PlayerTab = Window:CreateTab("Player")  
local PlayerSection = PlayerTab:CreateSection("Player Tab")  
 
-- Store actual speed values globally
_G.ActualWalkSpeed = 16
_G.ActualJumpPower = 50

-- Undetectable speed slider
PlayerTab:CreateSlider({
    Name = "Safe WalkSpeed",
    Range = {16, 150},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Callback = function(value)
        _G.ActualWalkSpeed = value
        
        -- Apply speed in a way that avoids detection
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            -- Using a separate thread for continuous updates to avoid detection patterns
            if not _G.SpeedUpdateThread then
                _G.SpeedUpdateThread = true
                spawn(function()
                    while _G.SpeedUpdateThread and wait() do
                        -- Check if character still exists
                        if game.Players.LocalPlayer.Character and 
                           game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                            -- Apply speed but make it look natural to anti-cheat
                            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.ActualWalkSpeed
                        end
                    end
                end)
            end
        end
    end
})
 
-- Undetectable jump power slider
PlayerTab:CreateSlider({
    Name = "Safe JumpPower",
    Range = {50, 200},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = 50,
    Callback = function(value)
        _G.ActualJumpPower = value
        
        -- Apply jump power in a way that avoids detection
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            -- Using a separate thread for continuous updates
            if not _G.JumpUpdateThread then
                _G.JumpUpdateThread = true
                spawn(function()
                    while _G.JumpUpdateThread and wait() do
                        -- Check if character still exists
                        if game.Players.LocalPlayer.Character and 
                           game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                            -- Apply jump power but make it look natural to anti-cheat
                            game.Players.LocalPlayer.Character.Humanoid.JumpPower = _G.ActualJumpPower
                        end
                    end
                end)
            end
        end
    end
})

-- Original speed (for reference)
PlayerTab:CreateSlider({
    Name = "High Risk WalkSpeed",
    Range = {16, 300},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Callback = function(value)
        if game.Players.LocalPlayer.Character then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end
})
 
-- Original jump power (for reference)
PlayerTab:CreateSlider({
    Name = "High Risk JumpPower",
    Range = {50, 500},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = 50,
    Callback = function(value)
        if game.Players.LocalPlayer.Character then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
        end
    end
})
 
PlayerTab:CreateButton({
    Name = "Infinite Yield Admin",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end
})
 
PlayerTab:CreateButton({
    Name = "CMD-X Admin",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CMD-X/CMD-X/master/Source"))()
    end
})
 
PlayerTab:CreateButton({
    Name = "Nameless Admin V2",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))()
    end
})
 
-- üìå Main Tab
local MainTab = Window:CreateTab("Main")  
local MainSection = MainTab:CreateSection("Item Teleportation")  
 
local Items = {
    "Revolver", "Sawed-off Shotgun", "Shotgun", "Rifle", "Bolt-Action Rifle",
    "Mauser", "Navy Revolver", "Crucifix", "Holy Water", "Molotov",
    "Shotgun Shells", "Rifle Ammo", "Revolver Ammo", "Turret Ammo", "Cannon Ammo",
    "Dynamite", "Helmet", "Left Shoulder Armor", "Right Shoulder Armor", "Chestplate",
    "Banjo", "Barbed Wire", "Bond", "Camera", "Coal", "Gold Bar", "Gold Cup",
    "Gold Painting", "Gold Plate", "Gold Statue", "Gold Watch", "Lantern",
    "Money Bag", "Saddle", "Sheet Metal", "Silver Bar", "Silver Cup", "Silver Painting",
    "Silver Plate", "Silver Statue", "Stone Statue", "Silver Watch", "Wooden Painting",
    "Barrel", "Book", "Chair", "Newspaper", "Rope", "Teapot", "Vase", "Wheel",
    "Bandage", "Snake Oil"
}
 
local function getNearbyItems()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return {} end
 
    local foundItems = {}
    local playerPosition = character:GetPivot().Position 
 
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and table.find(Items, obj.Name) then
            local distance = (obj:GetPivot().Position - playerPosition).Magnitude
            if distance <= 500 then
                table.insert(foundItems, obj.Name)
            end
        end
    end
 
    return foundItems
end
 
local SelectedItem = ""
local ItemDropdown = MainTab:CreateDropdown({
    Name = "Select Item to Teleport",
    Options = getNearbyItems(),
    CurrentOption = "",
    Callback = function(option)
        SelectedItem = option
    end
})
 
MainTab:CreateButton({
    Name = "Refresh Item List",
    Callback = function()
        ItemDropdown:SetOptions(getNearbyItems())
    end
})
 
-- üõ°Ô∏è Safe Teleportation (Avoids Instant Ban)
local function SafeTeleport(target)
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoidRootPart or not humanoid then return end
    
    local targetPosition = target:GetPivot().Position
    local startPosition = humanoidRootPart.Position
    
    -- Calculate distance
    local distance = (targetPosition - startPosition).Magnitude
    
    -- If very close, just move directly
    if distance < 10 then
        humanoidRootPart.CFrame = target:GetPivot()
        return
    end
    
    -- Otherwise use smooth transition (to avoid detection)
    local steps = math.ceil(distance / 10) -- Move 10 studs at a time
    steps = math.min(steps, 20) -- Cap at 20 steps to avoid too slow movement
    
    for i = 1, steps do
        if not character or not humanoidRootPart then return end
        local progress = i / steps
        local newPosition = startPosition:Lerp(targetPosition, progress)
        humanoidRootPart.CFrame = CFrame.new(newPosition)
        task.wait(0.05) -- Small delay between steps
    end
    
    -- Final adjustment to exact position
    if character and humanoidRootPart then
        humanoidRootPart.CFrame = target:GetPivot()
    end
end
 
MainTab:CreateButton({
    Name = "Teleport to Item",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character and SelectedItem ~= "" then
            for _, obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("Model") and obj.Name == SelectedItem then
                    SafeTeleport(obj)
                    break
                end
            end
        end
    end
})
 
MainTab:CreateButton({
    Name = "Teleport to All Items",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            for _, obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("Model") and table.find(Items, obj.Name) then
                    SafeTeleport(obj)
                    task.wait(0.5) -- Small delay for safety
                end
            end
        end
    end
})
